// <auto-generated />
using System;
using BailarinaPreparadaApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BailarinaPreparadaApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Achievements.AchievementDefinition", b =>
                {
                    b.Property<string>("AchievementDefinitionId")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("AchievementDefinitionId")
                        .HasName("PK_AchievementDefinitions");

                    b.ToTable("AchievementDefinitions", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Achievements.UserAchievement", b =>
                {
                    b.Property<int>("UserAchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAchievementId"));

                    b.Property<DateTime>("AchievedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("AchievementDefinitionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("ReferenceDate")
                        .HasColumnType("DATE");

                    b.Property<int?>("Sequence")
                        .HasColumnType("INT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("UserAchievementId")
                        .HasName("PK_UserAchievements");

                    b.HasIndex("AchievementDefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.ActivityLinks.ActivityLink", b =>
                {
                    b.Property<int>("ActivityLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLinkId"));

                    b.Property<string>("DefaultColor")
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("ActivityLinkId")
                        .HasName("PK_ActivityLinks");

                    b.ToTable("ActivityLinks", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Addresses.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<double?>("Latitude")
                        .HasColumnType("FLOAT");

                    b.Property<double?>("Longitude")
                        .HasColumnType("FLOAT");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("AddressId")
                        .HasName("PK_Addresses");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Announcements.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("Category")
                        .HasColumnType("INT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("DATETIME2");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("BIT");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("AnnouncementId")
                        .HasName("PK_Announcements");

                    b.HasIndex("AuthorId");

                    b.ToTable("Announcements", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Evaluations.Evaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationId"));

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("PhotosUrl")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UserGender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("EvaluationId")
                        .HasName("PK_Evaluations");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Evaluations", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Evaluations.EvaluationExercise", b =>
                {
                    b.Property<int>("EvaluationExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvaluationExerciseId"));

                    b.Property<int>("EvaluationId")
                        .HasColumnType("INT");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INT");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("Score")
                        .HasColumnType("INT");

                    b.Property<int>("Side")
                        .HasColumnType("INT");

                    b.HasKey("EvaluationExerciseId")
                        .HasName("PK_EvaluationExercises");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("EvaluationExercises", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.ExerciseReferences.ExerciseReference", b =>
                {
                    b.Property<int>("ExerciseReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseReferenceId"));

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("MaxAge")
                        .HasColumnType("INT");

                    b.Property<int?>("MaxValue")
                        .HasColumnType("INT");

                    b.Property<int>("MinAge")
                        .HasColumnType("INT");

                    b.Property<int>("MinValue")
                        .HasColumnType("INT");

                    b.Property<string>("Source")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("ExerciseReferenceId")
                        .HasName("PK_ExerciseReferences");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseReferences", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Exercises.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<int>("ExerciseCategory")
                        .HasColumnType("INT");

                    b.Property<bool>("IsUnilateral")
                        .HasColumnType("BIT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("ExerciseId")
                        .HasName("PK_Exercises");

                    b.ToTable("Exercises", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.ScheduleTasks.ScheduleTask", b =>
                {
                    b.Property<int>("ScheduleTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleTaskId"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<int?>("ActivityLinkId")
                        .HasColumnType("INT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INT");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("INT");

                    b.Property<int>("Slot")
                        .HasColumnType("INT");

                    b.HasKey("ScheduleTaskId")
                        .HasName("PK_ScheduleTasks");

                    b.HasIndex("ActivityLinkId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleTasks", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Schedules.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Goal")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Observations")
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("ScheduleId")
                        .HasName("PK_Schedules");

                    b.HasIndex("UserId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Trainings.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("BIT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("TrainingId")
                        .HasName("PK_Trainings");

                    b.HasIndex("UserId");

                    b.ToTable("Trainings", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("BIT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Users.UserGoal", b =>
                {
                    b.Property<int>("UserGoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGoalId"));

                    b.Property<int>("GoalDays")
                        .HasColumnType("INT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("NVARCHAR");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.HasKey("UserGoalId")
                        .HasName("PK_UserGoals");

                    b.HasIndex("UserId");

                    b.ToTable("UserGoals", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Achievements.UserAchievement", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Achievements.AchievementDefinition", "AchievementDefinition")
                        .WithMany()
                        .HasForeignKey("AchievementDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Addresses.Address", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("BailarinaPreparadaApp.Models.Addresses.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Announcements.Announcement", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Evaluations.Evaluation", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Evaluations.EvaluationExercise", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Evaluations.Evaluation", "Evaluation")
                        .WithMany("Exercises")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BailarinaPreparadaApp.Models.Exercises.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.ExerciseReferences.ExerciseReference", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Exercises.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.ScheduleTasks.ScheduleTask", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.ActivityLinks.ActivityLink", "ActivityLink")
                        .WithMany("ScheduleTasks")
                        .HasForeignKey("ActivityLinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BailarinaPreparadaApp.Models.Schedules.Schedule", "Schedule")
                        .WithMany("Entries")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLink");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Schedules.Schedule", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Trainings.Training", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Users.UserGoal", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BailarinaPreparadaApp.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.ActivityLinks.ActivityLink", b =>
                {
                    b.Navigation("ScheduleTasks");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Evaluations.Evaluation", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Schedules.Schedule", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("BailarinaPreparadaApp.Models.Users.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
